#import all relevant libraries and packages
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import random
import sklearn
from sklearn.neural_network import MLPClassifier from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error
from math import sqrt
from sklearn.metrics import r2_score

df=pd.read_csv('data3.csv')
print(df.shape)
df.describe().transpose()

#q2.a
X = df[predictors].values
y = df[target_column].values
per_model = Perceptron(max_iter=40, eta0=0.1, random_state=0)
per_model.fit(X,y)

#q2.b
per_model.fit(X,y)
y_pred = per_model.predict(X)
per_model.fit(X,y_pred)

#Q2.c
plt.figure(figsize=(10,10))
Xclass1 = X[Y==1,:]
Xclass2 = X[Y==-1,:]
ax1.scatter(Xclass1[:,0], Xclass1[:,1], colour='green', label='Class 1');
ax1.scatter(Xclass2[:,0], Xclass2[:,1], colour='orange', label='Class -1');
ax1.set_title('Original Dataset and class');
ax1.set_xlabel('X1');
ax1.set_ylabel('X2');

Xclass1 = X[y_pred==1,:]
Xclass2 = X[y_pred==-1,:]
ax2.scatter(Xclass1[:,0], Xclass1[:,1], colour='green', label='Class 1');
ax2.scatter(Xclass2[:,0], Xclass2[:,1], colour='orange', label='Class -1');
ax2.set_xticks(np.arange(1,10))
ax2.set_title('Original Dataset and PREDICTED class');
ax2.set_xlabel('X1');
ax2.set_label('X2');

#Q2.d
plt.scatter(x=[[0.12,0.24,0.3,0.5,0.55,0.67,0.74,0.87,0.89,0.95]],y=[[1,2,3,4,
5,6,7,8,9,10]])
plt.suptitle("Model Accuracy Vs. Number of Model Iteration")
plt.xlabel("Model Accuracy")
plt.ylabel("Model Iteration")

#q2.e
from sklearn.model_selection import KFold kf = KFold(n_splits=4)
kf.get_n_splits(X)
for train_index, test_index in kf.split(X):
    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = y[train_index], y[test_index]
